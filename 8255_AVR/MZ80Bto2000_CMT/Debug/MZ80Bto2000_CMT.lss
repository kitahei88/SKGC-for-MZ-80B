
MZ80Bto2000_CMT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000042e  2**0
                  ALLOC, LOAD, DATA
  1 .text         0000008a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000042e  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  0000045d  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  0000046b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000dd9  00000000  00000000  000004e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000071a  00000000  00000000  000012bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005b6  00000000  00000000  000019d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000150  00000000  00000000  00001f8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  000020dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000576  00000000  00000000  000022e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  0000285a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000002  00000390  00000390  00000424  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000028c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.init    00000046  0000020a  0000020a  0000029e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.timer_init 00000032  00000290  00000290  00000324  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_13 00000030  000002c2  000002c2  00000356  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__vector_2 0000002c  00000322  00000322  000003b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__vector_5 00000030  000002f2  000002f2  00000386  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.stop    00000028  0000034e  0000034e  000003e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.play    0000005c  00000154  00000154  000001e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.ff      0000005a  000001b0  000001b0  00000244  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.rew     00000064  000000f0  000000f0  00000184  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__vector_11 00000066  0000008a  0000008a  0000011e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.apss    0000000c  00000384  00000384  00000418  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.main    00000040  00000250  00000250  000002e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .bss.rew_flg  00000001  00800100  00800100  0000042e  2**0
                  ALLOC
 27 .bss.play_flg 00000001  00800101  00800101  0000042e  2**0
                  ALLOC
 28 .bss.action   00000001  00800102  00800102  0000042e  2**0
                  ALLOC
 29 .text.__dummy_fini 00000002  00000392  00000392  00000426  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.__dummy_funcs_on_exit 00000002  00000394  00000394  00000428  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.__dummy_simulator_exit 00000002  00000396  00000396  0000042a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.exit    0000000e  00000376  00000376  0000040a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text._Exit   00000002  00000398  00000398  0000042c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	1c c0       	rjmp	.+56     	; 0x3a <__ctors_end>
   2:	c6 c1       	rjmp	.+908    	; 0x390 <__bad_interrupt>
   4:	8e c1       	rjmp	.+796    	; 0x322 <__vector_2>
   6:	c4 c1       	rjmp	.+904    	; 0x390 <__bad_interrupt>
   8:	c3 c1       	rjmp	.+902    	; 0x390 <__bad_interrupt>
   a:	73 c1       	rjmp	.+742    	; 0x2f2 <__vector_5>
   c:	c1 c1       	rjmp	.+898    	; 0x390 <__bad_interrupt>
   e:	c0 c1       	rjmp	.+896    	; 0x390 <__bad_interrupt>
  10:	bf c1       	rjmp	.+894    	; 0x390 <__bad_interrupt>
  12:	be c1       	rjmp	.+892    	; 0x390 <__bad_interrupt>
  14:	bd c1       	rjmp	.+890    	; 0x390 <__bad_interrupt>
  16:	39 c0       	rjmp	.+114    	; 0x8a <_etext>
  18:	bb c1       	rjmp	.+886    	; 0x390 <__bad_interrupt>
  1a:	53 c1       	rjmp	.+678    	; 0x2c2 <__vector_13>
  1c:	b9 c1       	rjmp	.+882    	; 0x390 <__bad_interrupt>
  1e:	b8 c1       	rjmp	.+880    	; 0x390 <__bad_interrupt>
  20:	b7 c1       	rjmp	.+878    	; 0x390 <__bad_interrupt>
  22:	b6 c1       	rjmp	.+876    	; 0x390 <__bad_interrupt>
  24:	b5 c1       	rjmp	.+874    	; 0x390 <__bad_interrupt>
  26:	b4 c1       	rjmp	.+872    	; 0x390 <__bad_interrupt>
  28:	b3 c1       	rjmp	.+870    	; 0x390 <__bad_interrupt>
  2a:	b2 c1       	rjmp	.+868    	; 0x390 <__bad_interrupt>
  2c:	b1 c1       	rjmp	.+866    	; 0x390 <__bad_interrupt>
  2e:	b0 c1       	rjmp	.+864    	; 0x390 <__bad_interrupt>
  30:	af c1       	rjmp	.+862    	; 0x390 <__bad_interrupt>
  32:	ae c1       	rjmp	.+860    	; 0x390 <__bad_interrupt>

00000034 <.dinit>:
  34:	01 00       	.word	0x0001	; ????
  36:	01 03       	mulsu	r16, r17
  38:	80 00       	.word	0x0080	; ????

0000003a <__ctors_end>:
  3a:	11 24       	eor	r1, r1
  3c:	1f be       	out	0x3f, r1	; 63
  3e:	cf ef       	ldi	r28, 0xFF	; 255
  40:	d4 e0       	ldi	r29, 0x04	; 4
  42:	de bf       	out	0x3e, r29	; 62
  44:	cd bf       	out	0x3d, r28	; 61

00000046 <__do_copy_data>:
  46:	e4 e3       	ldi	r30, 0x34	; 52
  48:	f0 e0       	ldi	r31, 0x00	; 0
  4a:	40 e0       	ldi	r20, 0x00	; 0
  4c:	17 c0       	rjmp	.+46     	; 0x7c <__do_clear_bss+0x8>
  4e:	b5 91       	lpm	r27, Z+
  50:	a5 91       	lpm	r26, Z+
  52:	35 91       	lpm	r19, Z+
  54:	25 91       	lpm	r18, Z+
  56:	05 91       	lpm	r16, Z+
  58:	07 fd       	sbrc	r16, 7
  5a:	0c c0       	rjmp	.+24     	; 0x74 <__do_clear_bss>
  5c:	95 91       	lpm	r25, Z+
  5e:	85 91       	lpm	r24, Z+
  60:	ef 01       	movw	r28, r30
  62:	f9 2f       	mov	r31, r25
  64:	e8 2f       	mov	r30, r24
  66:	05 90       	lpm	r0, Z+
  68:	0d 92       	st	X+, r0
  6a:	a2 17       	cp	r26, r18
  6c:	b3 07       	cpc	r27, r19
  6e:	d9 f7       	brne	.-10     	; 0x66 <__do_copy_data+0x20>
  70:	fe 01       	movw	r30, r28
  72:	04 c0       	rjmp	.+8      	; 0x7c <__do_clear_bss+0x8>

00000074 <__do_clear_bss>:
  74:	1d 92       	st	X+, r1
  76:	a2 17       	cp	r26, r18
  78:	b3 07       	cpc	r27, r19
  7a:	e1 f7       	brne	.-8      	; 0x74 <__do_clear_bss>
  7c:	e9 33       	cpi	r30, 0x39	; 57
  7e:	f4 07       	cpc	r31, r20
  80:	31 f7       	brne	.-52     	; 0x4e <__do_copy_data+0x8>
  82:	e6 d0       	rcall	.+460    	; 0x250 <main>
  84:	78 c1       	rjmp	.+752    	; 0x376 <exit>

00000086 <_exit>:
  86:	f8 94       	cli

00000088 <__stop_program>:
  88:	ff cf       	rjmp	.-2      	; 0x88 <__stop_program>

Disassembly of section .text:

00000390 <__bad_interrupt>:
 390:	37 ce       	rjmp	.-914    	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.init:

0000020a <init>:
//	void aplay(void);
//	void arew(void);
	
void init(void)
{
	cli();
 20a:	f8 94       	cli
	// PD0~7 set to input (pull up), PD3(TAPECOUNTER) set to INT1 interrupt
	PORTD	=	0b11111111;
 20c:	8f ef       	ldi	r24, 0xFF	; 255
 20e:	8b b9       	out	0x0b, r24	; 11
	DDRD	=	0b00000000;
 210:	1a b8       	out	0x0a, r1	; 10
	
	// PC0~5 set to output
	// PC6 is reset(not use)
	PORTC	=	0b11000010;
 212:	92 ec       	ldi	r25, 0xC2	; 194
 214:	98 b9       	out	0x08, r25	; 8
	DDRC	=	0b11111111;
 216:	87 b9       	out	0x07, r24	; 7
		
	// PB0 input(B/_2000), PB1 output(OC1A TAPEEND)
	// PB 2,7 reserved(input) PB3~5 to SPI
	PORTB	=	0b11111111;
 218:	85 b9       	out	0x05, r24	; 5
	DDRB	=	0b00000010;
 21a:	92 e0       	ldi	r25, 0x02	; 2
 21c:	94 b9       	out	0x04, r25	; 4
		
	MCUCR = 0x00;	/*	JTAG,電圧などのリセットフラグ	*/
 21e:	15 be       	out	0x35, r1	; 53
	// INT1 edge trigger interrupt
	EICRA = 0x04;	
 220:	84 e0       	ldi	r24, 0x04	; 4
 222:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7fe069>
	EIMSK = 0x02;
 226:	9d bb       	out	0x1d, r25	; 29
	
	TIMSK0 = 0x00;	/*	8ビットtimer0の割り込みソースの設定(初期設定は何も割り込みを設定しない)	*/
 228:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7fe06e>
	TIMSK1 = 0x00;	/*	16ビットtimer1の割り込みソースの設定(初期設定は何も割り込みを設定しない)	*/
 22c:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fe06f>
	TIMSK2 = 0x00;	/*	8ビットtimer2の割り込みソースの設定	*/
 230:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7fe070>
	PCMSK0 = 0x00;	/*	PCINT0(0~7)の割り込み	（不使用）	*/
 234:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <__TEXT_REGION_LENGTH__+0x7fe06b>
	PCMSK1 = 0x00;	/*	PCINT1(8~15)の割り込み	（不使用）	*/
 238:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__TEXT_REGION_LENGTH__+0x7fe06c>
	PCMSK2 = 0b11110111;	/*	PCINT2(16~23)の割り込み	（使用）	*/
 23c:	97 ef       	ldi	r25, 0xF7	; 247
 23e:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <__TEXT_REGION_LENGTH__+0x7fe06d>
	PCICR	= 0x04;	/*	PCINT2	*/
 242:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7fe068>
	ACSR	= 0x00; /*	アナログコンパレータ無効	*/
 246:	10 be       	out	0x30, r1	; 48
	PRR		= 0x00;	/*	電力削減レジスタの設定（すべてフルパワーで使用可能)	*/
 248:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7fe064>
		
	sei();
 24c:	78 94       	sei
 24e:	08 95       	ret

Disassembly of section .text.timer_init:

00000290 <timer_init>:
	return;
}

void timer_init(void)
{	// 16bit timer 1 setting for TAPE END signal
	TIMSK1	=	0x00;		/*開始時には割り込みなし*/
 290:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fe06f>
	TCNT1	=	0;		
 294:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fe085>
 298:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fe084>
	ICR1	=	0xFF00;		// counter max (for overflow bug)
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	9f ef       	ldi	r25, 0xFF	; 255
 2a0:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7fe087>
 2a4:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7fe086>
	OCR1A	=	(F_CPU)/256;	// 8MHzclock/256, 1 sec. tape stop 
 2a8:	82 e1       	ldi	r24, 0x12	; 18
 2aa:	9a e7       	ldi	r25, 0x7A	; 122
 2ac:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fe089>
 2b0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fe088>
	TCCR1A	=	0b11000010;	// high speed PWM, inverted output to OC1A, top counter is ICR1
 2b4:	82 ec       	ldi	r24, 0xC2	; 194
 2b6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fe080>
	TCCR1B	=	0b00011000; // timer stop
 2ba:	88 e1       	ldi	r24, 0x18	; 24
 2bc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fe081>
 2c0:	08 95       	ret

Disassembly of section .text.__vector_13:

000002c2 <__vector_13>:

// almost 2 sec interrupt from timer start
// this interrupt never occurred
// for something wrong.(TOP insurance)
ISR(TIMER1_OVF_vect)
{
 2c2:	1f 92       	push	r1
 2c4:	0f 92       	push	r0
 2c6:	0f b6       	in	r0, 0x3f	; 63
 2c8:	0f 92       	push	r0
 2ca:	11 24       	eor	r1, r1
 2cc:	8f 93       	push	r24
	// stop timer
	TCCR1B	=	0b00011000; // timer stop
 2ce:	88 e1       	ldi	r24, 0x18	; 24
 2d0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fe081>
	TIMSK1	=	0x00;		
 2d4:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fe06f>
	// counter reset
	TCNT1	=	0;
 2d8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fe085>
 2dc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fe084>
	// OC1A to high
	sbi(PORTB,TAPEEND);
 2e0:	85 b1       	in	r24, 0x05	; 5
 2e2:	82 60       	ori	r24, 0x02	; 2
 2e4:	85 b9       	out	0x05, r24	; 5
}
 2e6:	8f 91       	pop	r24
 2e8:	0f 90       	pop	r0
 2ea:	0f be       	out	0x3f, r0	; 63
 2ec:	0f 90       	pop	r0
 2ee:	1f 90       	pop	r1
 2f0:	18 95       	reti

Disassembly of section .text.__vector_2:

00000322 <__vector_2>:

ISR(INT1_vect)
{
 322:	1f 92       	push	r1
 324:	0f 92       	push	r0
 326:	0f b6       	in	r0, 0x3f	; 63
 328:	0f 92       	push	r0
 32a:	11 24       	eor	r1, r1
 32c:	8f 93       	push	r24
	// start timer with interrupt and reset counter
	TCNT1	= 0;
 32e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fe085>
 332:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fe084>
	TIMSK1	=	0b00000011;	// OCR1A and TOP(ICR1)value interrupt
 336:	83 e0       	ldi	r24, 0x03	; 3
 338:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fe06f>
	TCCR1B	=	0b00011100; // timer start 1/256
 33c:	8c e1       	ldi	r24, 0x1C	; 28
 33e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fe081>
	// TAPEEND got to low.
}
 342:	8f 91       	pop	r24
 344:	0f 90       	pop	r0
 346:	0f be       	out	0x3f, r0	; 63
 348:	0f 90       	pop	r0
 34a:	1f 90       	pop	r1
 34c:	18 95       	reti

Disassembly of section .text.__vector_5:

000002f2 <__vector_5>:

ISR(PCINT2_vect)
{
 2f2:	1f 92       	push	r1
 2f4:	0f 92       	push	r0
 2f6:	0f b6       	in	r0, 0x3f	; 63
 2f8:	0f 92       	push	r0
 2fa:	11 24       	eor	r1, r1
 2fc:	8f 93       	push	r24
 2fe:	9f 93       	push	r25
	// CMT function call
	action |= ~(PPI | ( 1<<PIND3));
 300:	89 b1       	in	r24, 0x09	; 9
 302:	88 60       	ori	r24, 0x08	; 8
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	80 95       	com	r24
 308:	90 95       	com	r25
 30a:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <action>
 30e:	89 2b       	or	r24, r25
 310:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <action>
}
 314:	9f 91       	pop	r25
 316:	8f 91       	pop	r24
 318:	0f 90       	pop	r0
 31a:	0f be       	out	0x3f, r0	; 63
 31c:	0f 90       	pop	r0
 31e:	1f 90       	pop	r1
 320:	18 95       	reti

Disassembly of section .text.stop:

0000034e <stop>:

void stop(void)
{
	action &= ~(STOP);
 34e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <action>
 352:	8e 7f       	andi	r24, 0xFE	; 254
 354:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <action>
	CMT = (1<<STP | 1<<BLK1);
 358:	8a e0       	ldi	r24, 0x0A	; 10
 35a:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 35c:	8f e2       	ldi	r24, 0x2F	; 47
 35e:	95 e7       	ldi	r25, 0x75	; 117
 360:	01 97       	sbiw	r24, 0x01	; 1
 362:	f1 f7       	brne	.-4      	; 0x360 <stop+0x12>
 364:	00 c0       	rjmp	.+0      	; 0x366 <stop+0x18>
 366:	00 00       	nop
	_delay_ms(15);
	CMT	= (1<<BLK1);
 368:	82 e0       	ldi	r24, 0x02	; 2
 36a:	88 b9       	out	0x08, r24	; 8
	play_flg = false;
 36c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <play_flg>
	rew_flg = false;
 370:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 374:	08 95       	ret

Disassembly of section .text.play:

00000154 <play>:
	return;
}

void play(void)
{
	action &= ~(PLAY);
 154:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <action>
 158:	8b 7f       	andi	r24, 0xFB	; 251
 15a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <action>
	CMT	= (1<<BLK1);
 15e:	82 e0       	ldi	r24, 0x02	; 2
 160:	88 b9       	out	0x08, r24	; 8
 162:	ef e0       	ldi	r30, 0x0F	; 15
 164:	f7 e2       	ldi	r31, 0x27	; 39
 166:	31 97       	sbiw	r30, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <play+0x12>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <play+0x18>
 16c:	00 00       	nop
	_delay_ms(5);
	CMT = (1<<RW | 1<<BLK1);
 16e:	92 e2       	ldi	r25, 0x22	; 34
 170:	98 b9       	out	0x08, r25	; 8
 172:	ef e2       	ldi	r30, 0x2F	; 47
 174:	f5 e7       	ldi	r31, 0x75	; 117
 176:	31 97       	sbiw	r30, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <play+0x22>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <play+0x28>
 17c:	00 00       	nop
	_delay_ms(15);
	CMT = (1<<BLK1);
 17e:	88 b9       	out	0x08, r24	; 8
 180:	ff eb       	ldi	r31, 0xBF	; 191
 182:	2a ed       	ldi	r18, 0xDA	; 218
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	f1 50       	subi	r31, 0x01	; 1
 188:	20 40       	sbci	r18, 0x00	; 0
 18a:	30 40       	sbci	r19, 0x00	; 0
 18c:	e1 f7       	brne	.-8      	; 0x186 <play+0x32>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <play+0x3c>
 190:	00 00       	nop
	_delay_ms(35);
	CMT = (1<<PNL | 1<< BLK1);
 192:	96 e0       	ldi	r25, 0x06	; 6
 194:	98 b9       	out	0x08, r25	; 8
 196:	ef e2       	ldi	r30, 0x2F	; 47
 198:	f5 e7       	ldi	r31, 0x75	; 117
 19a:	31 97       	sbiw	r30, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <play+0x46>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <play+0x4c>
 1a0:	00 00       	nop
	_delay_ms(15);
	CMT = (1<<BLK1);
 1a2:	88 b9       	out	0x08, r24	; 8
	play_flg = true;
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <play_flg>
	rew_flg = false;
 1aa:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ae:	08 95       	ret

Disassembly of section .text.ff:

000001b0 <ff>:
	return;
}

void ff(void)
{
	action &= ~(FF);
 1b0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <action>
 1b4:	8f 7d       	andi	r24, 0xDF	; 223
 1b6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <action>
	CMT = (1<<BLK1);
 1ba:	82 e0       	ldi	r24, 0x02	; 2
 1bc:	88 b9       	out	0x08, r24	; 8
 1be:	ef e0       	ldi	r30, 0x0F	; 15
 1c0:	f7 e2       	ldi	r31, 0x27	; 39
 1c2:	31 97       	sbiw	r30, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <ff+0x12>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <ff+0x18>
 1c8:	00 00       	nop
	_delay_ms(5);
	CMT = (1<<RW | 1<<BLK1);
 1ca:	92 e2       	ldi	r25, 0x22	; 34
 1cc:	98 b9       	out	0x08, r25	; 8
 1ce:	ef e2       	ldi	r30, 0x2F	; 47
 1d0:	f5 e7       	ldi	r31, 0x75	; 117
 1d2:	31 97       	sbiw	r30, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <ff+0x22>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <ff+0x28>
 1d8:	00 00       	nop
	_delay_ms(15);
	CMT = (1<<BLK1);
 1da:	88 b9       	out	0x08, r24	; 8
 1dc:	ff eb       	ldi	r31, 0xBF	; 191
 1de:	2a ed       	ldi	r18, 0xDA	; 218
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	f1 50       	subi	r31, 0x01	; 1
 1e4:	20 40       	sbci	r18, 0x00	; 0
 1e6:	30 40       	sbci	r19, 0x00	; 0
 1e8:	e1 f7       	brne	.-8      	; 0x1e2 <ff+0x32>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <ff+0x3c>
 1ec:	00 00       	nop
	_delay_ms(35);
	CMT = (1<<BLK1 | 1<<BLK2);
 1ee:	93 e0       	ldi	r25, 0x03	; 3
 1f0:	98 b9       	out	0x08, r25	; 8
 1f2:	ef e2       	ldi	r30, 0x2F	; 47
 1f4:	f5 e7       	ldi	r31, 0x75	; 117
 1f6:	31 97       	sbiw	r30, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <ff+0x46>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <ff+0x4c>
 1fc:	00 00       	nop
	_delay_ms(15);
	CMT = (1<<BLK1);
 1fe:	88 b9       	out	0x08, r24	; 8
	play_flg = false;
 200:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <play_flg>
	rew_flg = false;
 204:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 208:	08 95       	ret

Disassembly of section .text.rew:

000000f0 <rew>:
	return;
}

void rew(void)
{
	action &= ~(REW);
  f0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <action>
  f4:	8f 77       	andi	r24, 0x7F	; 127
  f6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <action>
	CMT = 0;
  fa:	18 b8       	out	0x08, r1	; 8
  fc:	8f e0       	ldi	r24, 0x0F	; 15
  fe:	97 e2       	ldi	r25, 0x27	; 39
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <rew+0x10>
 104:	00 c0       	rjmp	.+0      	; 0x106 <rew+0x16>
 106:	00 00       	nop
	_delay_ms(5);
	CMT = (1<<RW);
 108:	80 e2       	ldi	r24, 0x20	; 32
 10a:	88 b9       	out	0x08, r24	; 8
 10c:	ef e2       	ldi	r30, 0x2F	; 47
 10e:	f5 e7       	ldi	r31, 0x75	; 117
 110:	31 97       	sbiw	r30, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <rew+0x20>
 114:	00 c0       	rjmp	.+0      	; 0x116 <rew+0x26>
 116:	00 00       	nop
	_delay_ms(15);
	CMT = 0;
 118:	18 b8       	out	0x08, r1	; 8
 11a:	8f e2       	ldi	r24, 0x2F	; 47
 11c:	95 e7       	ldi	r25, 0x75	; 117
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <rew+0x2e>
 122:	00 c0       	rjmp	.+0      	; 0x124 <rew+0x34>
 124:	00 00       	nop
	_delay_ms(15);
	CMT = (1<<BLK1);
 126:	82 e0       	ldi	r24, 0x02	; 2
 128:	88 b9       	out	0x08, r24	; 8
 12a:	ef e3       	ldi	r30, 0x3F	; 63
 12c:	fc e9       	ldi	r31, 0x9C	; 156
 12e:	31 97       	sbiw	r30, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <rew+0x3e>
 132:	00 c0       	rjmp	.+0      	; 0x134 <rew+0x44>
 134:	00 00       	nop
	_delay_ms(20);
	CMT = (1<<BLK1 | 1<<BLK2);
 136:	93 e0       	ldi	r25, 0x03	; 3
 138:	98 b9       	out	0x08, r25	; 8
 13a:	ef e2       	ldi	r30, 0x2F	; 47
 13c:	f5 e7       	ldi	r31, 0x75	; 117
 13e:	31 97       	sbiw	r30, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <rew+0x4e>
 142:	00 c0       	rjmp	.+0      	; 0x144 <rew+0x54>
 144:	00 00       	nop
	_delay_ms(15);
	CMT = (1<<BLK1);
 146:	88 b9       	out	0x08, r24	; 8
	play_flg = false;	
 148:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <play_flg>
	rew_flg = true;		
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 152:	08 95       	ret

Disassembly of section .text.__vector_11:

0000008a <__vector_11>:
}

// 1 sec interrupt from timer start  
// this is TAPEEND status
ISR(TIMER1_COMPA_vect)
{
  8a:	1f 92       	push	r1
  8c:	0f 92       	push	r0
  8e:	0f b6       	in	r0, 0x3f	; 63
  90:	0f 92       	push	r0
  92:	11 24       	eor	r1, r1
  94:	2f 93       	push	r18
  96:	3f 93       	push	r19
  98:	4f 93       	push	r20
  9a:	5f 93       	push	r21
  9c:	6f 93       	push	r22
  9e:	7f 93       	push	r23
  a0:	8f 93       	push	r24
  a2:	9f 93       	push	r25
  a4:	af 93       	push	r26
  a6:	bf 93       	push	r27
  a8:	ef 93       	push	r30
  aa:	ff 93       	push	r31
	// stop timer
	TCCR1B	=	0b00011000; // timer stop
  ac:	88 e1       	ldi	r24, 0x18	; 24
  ae:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fe081>
	TIMSK1	=	0x00;		
  b2:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fe06f>
	// counter reset
//	TCNT1	=	0;
	// TAPEEND go to high until next timer start. 
	// for AREW and PLAY
	if (play_flg && (~PPI & AREW)) rew();
  b6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <play_flg>
  ba:	88 23       	and	r24, r24
  bc:	11 f0       	breq	.+4      	; 0xc2 <__vector_11+0x38>
  be:	49 9b       	sbis	0x09, 1	; 9
  c0:	17 d0       	rcall	.+46     	; 0xf0 <rew>
	if (rew_flg && (~PPI & APLAY)) play();
  c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  c6:	88 23       	and	r24, r24
  c8:	11 f0       	breq	.+4      	; 0xce <__vector_11+0x44>
  ca:	4c 9b       	sbis	0x09, 4	; 9
  cc:	43 d0       	rcall	.+134    	; 0x154 <play>
	もしplay＋AREWの状態もしくはREW＋APLAYの状態で、手動でテープを止めたらどうなるか？
	tc9121pには、テープの終わりも手動で止まるのも同じなのではないか？
	キー入力が禁止なのはKINHが有効の時で、これは8255のPC5
	これがどのように制御されているかは不明だが、これもMZ-2000と同じ実装をしたので、同じタイミングでキー入力が効かなくなるはず		
*/
}
  ce:	ff 91       	pop	r31
  d0:	ef 91       	pop	r30
  d2:	bf 91       	pop	r27
  d4:	af 91       	pop	r26
  d6:	9f 91       	pop	r25
  d8:	8f 91       	pop	r24
  da:	7f 91       	pop	r23
  dc:	6f 91       	pop	r22
  de:	5f 91       	pop	r21
  e0:	4f 91       	pop	r20
  e2:	3f 91       	pop	r19
  e4:	2f 91       	pop	r18
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

Disassembly of section .text.apss:

00000384 <apss>:
}

void apss(void)
{
	// MZ-80B CMT deck always works as APSS mode.
	action &= ~(APSS);
 384:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <action>
 388:	8f 7b       	andi	r24, 0xBF	; 191
 38a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <action>
 38e:	08 95       	ret

Disassembly of section .text.main:

00000250 <main>:
}
*/

int main(void)
{
	init();
 250:	dc df       	rcall	.-72     	; 0x20a <init>
	timer_init();
 252:	1e d0       	rcall	.+60     	; 0x290 <timer_init>
	// wait for MZ-2000 mode.
	cbi(CMT,_PLAY_HOLED);
 254:	88 b1       	in	r24, 0x08	; 8
 256:	8f 7e       	andi	r24, 0xEF	; 239
 258:	88 b9       	out	0x08, r24	; 8
	while(bit_is_set(PINB,B2000)) ;
 25a:	18 99       	sbic	0x03, 0	; 3
 25c:	fe cf       	rjmp	.-4      	; 0x25a <main+0xa>
	// set _REC_hold to stop tape
	// TODO: check tape end.
	sbi(CMT,_PLAY_HOLED);
 25e:	88 b1       	in	r24, 0x08	; 8
 260:	80 61       	ori	r24, 0x10	; 16
 262:	88 b9       	out	0x08, r24	; 8
	// signal change function enable
    while(1)
    {
		if (action & STOP)	stop();
 264:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <action>
 268:	80 ff       	sbrs	r24, 0
 26a:	02 c0       	rjmp	.+4      	; 0x270 <main+0x20>
 26c:	70 d0       	rcall	.+224    	; 0x34e <stop>
 26e:	fa cf       	rjmp	.-12     	; 0x264 <main+0x14>
			else if (action & PLAY)	play();
 270:	82 ff       	sbrs	r24, 2
 272:	02 c0       	rjmp	.+4      	; 0x278 <main+0x28>
 274:	6f df       	rcall	.-290    	; 0x154 <play>
 276:	f6 cf       	rjmp	.-20     	; 0x264 <main+0x14>
			else if (action & FF)		ff();
 278:	85 ff       	sbrs	r24, 5
 27a:	02 c0       	rjmp	.+4      	; 0x280 <main+0x30>
 27c:	99 df       	rcall	.-206    	; 0x1b0 <ff>
 27e:	f2 cf       	rjmp	.-28     	; 0x264 <main+0x14>
			else if (action & REW)	rew();
 280:	88 23       	and	r24, r24
 282:	14 f4       	brge	.+4      	; 0x288 <main+0x38>
 284:	35 df       	rcall	.-406    	; 0xf0 <rew>
 286:	ee cf       	rjmp	.-36     	; 0x264 <main+0x14>
			else if (action & APSS)	apss();
 288:	86 ff       	sbrs	r24, 6
 28a:	ec cf       	rjmp	.-40     	; 0x264 <main+0x14>
 28c:	7b d0       	rcall	.+246    	; 0x384 <apss>
 28e:	ea cf       	rjmp	.-44     	; 0x264 <main+0x14>

Disassembly of section .text.__dummy_fini:

00000392 <_fini>:
 392:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000394 <__funcs_on_exit>:
 394:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000396 <__simulator_exit>:
 396:	08 95       	ret

Disassembly of section .text.exit:

00000376 <exit>:
 376:	ec 01       	movw	r28, r24
 378:	0d d0       	rcall	.+26     	; 0x394 <__funcs_on_exit>
 37a:	0b d0       	rcall	.+22     	; 0x392 <_fini>
 37c:	ce 01       	movw	r24, r28
 37e:	0b d0       	rcall	.+22     	; 0x396 <__simulator_exit>
 380:	ce 01       	movw	r24, r28
 382:	0a d0       	rcall	.+20     	; 0x398 <_Exit>

Disassembly of section .text._Exit:

00000398 <_Exit>:
 398:	76 de       	rcall	.-788    	; 0x86 <_exit>
